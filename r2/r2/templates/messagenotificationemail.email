## The contents of this file are subject to the Common Public Attribution
## License Version 1.0. (the "License"); you may not use this file except in
## compliance with the License. You may obtain a copy of the License at
## http://code.reddit.com/LICENSE. The License is based on the Mozilla Public
## License Version 1.1, but Sections 14 and 15 have been added to cover use of
## software over a computer network and provide for limited attribution for the
## Original Developer. In addition, Exhibit A has been modified to be
## consistent with Exhibit B.
##
## Software distributed under the License is distributed on an "AS IS" basis,
## WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
## the specific language governing rights and limitations under the License.
##
## The Original Code is reddit.
##
## The Original Developer is the Initial Developer.  The Initial Developer of
## the Original Code is reddit Inc.
##
## All portions of the code written by reddit are Copyright (c) 2006-2014
## reddit Inc. All Rights Reserved.
###############################################################################

<%!
  from r2.lib.filters import unsafe
  from r2.lib.template_helpers import update_query
  from pylons.i18n import _, ungettext
%>

${_("You have {message_count} new {message} in your ").format(message_count=thing.message_count, message=_(ungettext('message', 'messages', thing.message_count)))} Reddit ${_("Inbox")}: ${unsafe(update_query(thing.inbox_url, utm_source="email", utm_medium="message_notification"))}

%for index, message in enumerate(thing.messages):
  %if message["message_type"] == "message":
    ${_("Private message from {author}").format(author=message['author_name'])}
    ${_("view")}: ${unsafe(update_query(message['permalink'], utm_source="email", utm_medium="message_notification", utm_name="private_message", utm_term=index))}

  %elif message["message_type"] == "post reply":
    ${_("Post reply from {author}").format(author=message['author_name'])}
    ${_("view")}: ${unsafe(update_query(message['permalink'], utm_source="email", utm_medium="message_notification", utm_name="post_reply", utm_term=index, context=3))}
 
  %elif message["message_type"] == "comment reply":
    ${_("Comment reply from {author}").format(author=message['author_name'])}
    ${_("view")}: ${unsafe(update_query(message['permalink'], utm_source="email", utm_medium="message_notification", utm_name="comment_reply", utm_term=index, context=3))}

  %elif message["message_type"] == "username notification":
    ${_("{author} mentioned you in a thread").format(author=message['author_name'])}
    ${_("view")}: ${unsafe(update_query(message['permalink'], utm_source="email", utm_medium="message_notification", utm_name="username_mention", utm_term=index, context=3))}
  %endif

  ${unsafe(message["body"])}

%endfor

%if thing.more_unread_messages:
  ${_("An additional {more_message_count} unread {message} from {usernames} {are_or_is} also in your Inbox.").format(more_message_count=thing.message_count - thing.max_message_display_count, are_or_is=_(ungettext('is', 'are', thing.message_count - thing.max_message_display_count)), message=_(ungettext('message', 'messages', thing.message_count - thing.max_message_display_count)), usernames=thing.non_preview_usernames_str)}
%endif

${_("Go to Reddit Inbox")}: ${unsafe(update_query(thing.inbox_url, utm_source="email", utm_medium="message_notification"))}

${_("If you would not like to receive emails from Reddit in the future, ")}
${_("unsubscribe")}: ${unsafe(thing.unsubscribe_link + 
"?ref_source=email&ref=message_notification&ref_campaign=unsubscribe")}
${"Reddit Inc."}: ${unsafe("https://www.google.com/maps/place/548+Market+St,+San+Francisco,+CA+94104/@37.790002,-122.4009435,17z/data=!3m1!4b1!4m2!3m1!1s0x808580627b5ea1d1:0x60fd99496057cf74")}

548 Market St #16093, San Francisco, CA 94104-5401, United States
